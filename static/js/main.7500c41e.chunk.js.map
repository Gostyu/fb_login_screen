{"version":3,"sources":["assets/social_media.png","components/Presentation.js","components/PrimaryButton.js","components/InputField.js","components/Form.js","components/RegisterAndLogIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Presentation","className","title","src","alt","img","PrimaryButton","class","InputField","placeholder","type","Form","label","RegisterAndLogIn","App","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,0C,8QCG5B,SAASC,EAAT,GAAyC,EAAlBC,UAAmB,IAATC,EAAQ,EAARA,MAC5C,OAAQ,yBAAKD,UAAU,kBACnB,yBAAKE,IAAI,qFACRC,IAAI,GAAGH,UAAU,SAClB,4BAAKC,GACL,yBAAKC,IAAKE,IAAKD,IAAI,GAAGH,UAAU,oB,kBCNzB,SAASK,EAAT,GAAgC,IAARJ,EAAO,EAAPA,MACvC,OAAO,4BAAQK,MAAM,WAAWL,G,MCDjB,SAASM,EAAT,GAAmC,IAAdC,EAAa,EAAbA,YAChC,OAAO,2BAAOC,KAAK,OAAOD,YAAaA,ICC5B,SAASE,EAAT,GAAuB,IAARC,EAAO,EAAPA,MAE1B,OAAO,8BACS,WAAVA,GACE,kBAAC,WAAD,KACI,+BAAQA,GACR,kBAAC,EAAD,CAAYH,YAAY,mBACxB,kBAAC,EAAD,CAAYA,YAAY,mBAC5B,kBAAC,EAAD,CAAeP,MAAM,WAIZ,YAARU,GACG,kBAAC,WAAD,KACA,+BAAQA,GACR,kBAAC,EAAD,CAAYH,YAAY,mBACxB,kBAAC,EAAD,CAAYA,YAAY,mBAC5B,kBAAC,EAAD,CAAeP,MAAM,YClBlB,SAASW,IAEpB,OAAQ,yBAAKZ,UAAU,mBACnB,kBAAC,EAAD,CAAMW,MAAM,WAEZ,kBAAC,EAAD,CAAMA,MAAM,aCMLE,MATf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAcC,MAAM,8DACpB,kBAAC,EAAD,QCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7500c41e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/social_media.34c01015.png\";","import React from 'react';\r\nimport \"./Presentation.css\";\r\nimport img from \"../assets/social_media.png\"\r\nexport default function Presentation({className,title}) {\r\n    return (<div className=\"left_container\">\r\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg\"\r\n         alt=\"\" className=\"logo\"/>\r\n        <h1>{title}</h1>\r\n        <img src={img} alt=\"\" className=\"container--img\"/>\r\n    </div>);\r\n};\r\n","import React from \"react\"\r\nimport \"./PrimaryButton.css\";\r\nexport default function PrimaryButton({title}){\r\nreturn <button class=\"primary\">{title}</button>\r\n}","import React from \"react\";\r\nimport \"./InputField.css\";\r\nexport default function InputField({placeholder}){\r\n    return <input type=\"text\" placeholder={placeholder}></input>;\r\n}","import React, { Fragment } from\"react\";\r\nimport \"./Form.css\";\r\nimport PrimaryButton from \"./PrimaryButton.js\";\r\nimport InputField from \"./InputField\";\r\nexport default function Form({label}){\r\n\r\n    return <form>\r\n        {(label === \"Log In\") && (\r\n            <Fragment>\r\n                <label>{label}</label>\r\n                <InputField placeholder=\"Email or Phone\"></InputField>\r\n                <InputField placeholder=\"Email or Phone\"></InputField>\r\n            <PrimaryButton title=\"LogIn\"></PrimaryButton>\r\n         </Fragment>)\r\n        }\r\n        {\r\n            (label===\"Sign Up\") && (\r\n                <Fragment>\r\n                <label>{label}</label>\r\n                <InputField placeholder=\"Email or Phone\"></InputField>\r\n                <InputField placeholder=\"Email or Phone\"></InputField>\r\n            <PrimaryButton title=\"LogIn\"></PrimaryButton>\r\n         </Fragment>\r\n            )\r\n        }\r\n         \r\n    </form>\r\n}","import React from 'react';\r\nimport \"./RegisterAndLogIn.css\";\r\nimport Form from \"./Form\";\r\nexport default function RegisterAndLogIn() {\r\n\r\n    return (<div className=\"right_container\">\r\n        <Form label=\"Log In\">\r\n        </Form>\r\n        <Form label=\"Sign Up\">\r\n        </Form>\r\n    </div>);\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Presentation from \"./components/Presentation.js\";\nimport RegisterAndLogIn from \"./components/RegisterAndLogIn.js\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Presentation title=\"Connect with friends and the world around you on Facebook\"></Presentation>\n      <RegisterAndLogIn></RegisterAndLogIn>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}